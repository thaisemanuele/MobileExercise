package com.app.jobapplication.activities;

import java.util.Locale;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.app.jobapplication.chargebackexercise.OnComplete;
import com.app.jobapplication.chargebackexercise.PostRequest;
import com.app.jobapplication.chargebackexercise.R;
import com.app.jobapplication.models.vo.ChargebackVO;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.text.Html;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager.LayoutParams;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

/**
 * CkargebackActivity
 * @author Thais
 *
 */
public class ChargebackActivity extends Activity {
	
	private static final String LOG = "ChargebackActivity";
	
	private ChargebackVO chargeback;
	private PopupWindow popupLoader;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_chargeback);
		//inflater= getLayoutInflater();

		String message = "";
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			message = extras.getString("jsonString");
		}
		JSONObject jsonobject = null;
		try {
			jsonobject = new JSONObject(message);
		} catch (JSONException e) {
			Log.e(LOG, "Error parsing " + message);
			jsonobject = new JSONObject();
		}
		Resources res = getResources();
		fillChargebackScreen(res, jsonobject);
	}

	/**
	 * fillChargebackScreen
	 * Set the correct values to appear on the screen 
	 * @param res
	 * @param jsonobject
	 */
	private void fillChargebackScreen(Resources res, JSONObject jsonobject) {
		
		/*TextView to show title*/
		TextView titleField = (TextView) this.findViewById(R.id.chargeback_title);
		
		/*TextView to show lock message*/
		TextView messageField = (TextView) this.findViewById(R.id.chargeback_lock_message);
		
		/*TextView to show reason1*/
		final TextView reason1Field = (TextView) this.findViewById(R.id.chargeback_reason1);
		
		/*TextView to show reason2*/
		final TextView reason2Field = (TextView) this.findViewById(R.id.chargeback_reason2);
		
		/*EditText for submitting comments*/
		EditText commentsField = (EditText) this.findViewById(R.id.chargeback_comments);
		
		/*ImageView for lock/unlock padlock*/
		ImageView lockImage = (ImageView) this.findViewById(R.id.chargeback_padlock);
		
		/*Switches for reason1 and reason2*/
		Switch primeSwitch = (Switch) this.findViewById(R.id.reason_button1);
		Switch secondSwitch = (Switch) this.findViewById(R.id.reason_button2);
		
		/*TextView for the Cancel Button*/
		TextView cancelButton = (TextView) this.findViewById(R.id.chargeback_cancel);

		/*TextView for the Confirm Button*/
		TextView confirmButton = (TextView) this.findViewById(R.id.chargeback_confirm);
		
		/*Setting Listeners*/
		if(primeSwitch.getTag()==null){
			primeSwitch.setTag(false);
		}
		primeSwitch.setOnCheckedChangeListener(
				new CompoundButton.OnCheckedChangeListener() {
					public void onCheckedChanged(
							CompoundButton buttonView, boolean isChecked) {
						buttonView.setTag(isChecked);
						Switch sw = (Switch) buttonView;
						TextView r1 = (TextView)reason1Field;
						if(isChecked){
							sw.setTrackResource(R.drawable.ic_track_selected);
							r1.setTextColor(getResources().getColor(R.color.RequiredGreen));
						}
						else {
							sw.setTrackResource(R.drawable.ic_track_unselected);
							r1.setTextColor(getResources().getColor(R.color.RequiredBlackTexts));
						}
		    }
		});
		if(secondSwitch.getTag()==null){
			secondSwitch.setTag(false);
		}
		secondSwitch.setOnCheckedChangeListener(
				new CompoundButton.OnCheckedChangeListener() {
					public void onCheckedChanged(
							CompoundButton buttonView, boolean isChecked) {
						buttonView.setTag(isChecked);
						Switch sw = (Switch) buttonView;
						TextView r2 = (TextView)reason2Field;
						if(isChecked){
							sw.setTrackResource(R.drawable.ic_track_selected);
							r2.setTextColor(getResources().getColor(R.color.RequiredGreen));
						}
						else {
							sw.setTrackResource(R.drawable.ic_track_unselected);
							r2.setTextColor(getResources().getColor(R.color.RequiredBlackTexts));
						}
		    }
		});
		cancelButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				finish();
			}
		});
		confirmButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				postChargebackRequest((TextView) v);
				
			}
		});
		lockImage.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(final View v) {
				postLockRequest((ImageView)v);
			}
		});
		/*Creating ChargebackVO*/
		chargeback = new ChargebackVO(jsonobject);
		String formatted = String.format(
				res.getString(R.string.formatted_html), chargeback.getCommentHint());
		
		/** Setting Views*/
		titleField.setText(chargeback.getTitle().toUpperCase(Locale.getDefault()));
		commentsField.setHint(Html.fromHtml(formatted));
		reason1Field.setText(chargeback.getReasonDetailsbyKey("merchant_recognized"));
		reason2Field.setText(chargeback.getReasonDetailsbyKey("card_in_possession"));
		confirmButton.setText(R.string.chargeback_confirm);
		cancelButton.setText(R.string.chargeback_cancel);
		
		if(chargeback.isAutoblock()){
			postLockRequest(lockImage);
//			messageField.setText(R.string.chargeback_card_blocked);
//			lockImage.setImageResource(R.drawable.ic_chargeback_lock);
		}
		else {
			messageField.setText(R.string.chargeback_card_unblocked);
			lockImage.setImageResource(R.drawable.ic_chargeback_unlock);
		}
		/** Foreground  transparency*/
		FrameLayout frame = (FrameLayout) findViewById( R.id.chargeback_frame);
		frame.getForeground().setAlpha(0);
		
		/** Loading Layout*/
		LayoutInflater l = getLayoutInflater();
		final View loader = l.inflate(R.layout.action_processing, null);
		popupLoader = new PopupWindow(loader,LayoutParams.WRAP_CONTENT,  
                LayoutParams.WRAP_CONTENT);
		
	}

	/**
	 * Send POST Request for the Chargeback Action 
	 * @param v
	 */
	protected void postChargebackRequest(TextView v) {
		
		showLoading();
		EditText commentsField = (EditText) this.findViewById(R.id.chargeback_comments);
		Switch primeSwitch = (Switch) this.findViewById(R.id.reason_button1);
		Switch secondSwitch = (Switch) this.findViewById(R.id.reason_button2);

		String comment = commentsField.getEditableText().toString();
		JSONObject primeObj = new JSONObject();
		JSONObject secondObj = new JSONObject();
		JSONArray array = new JSONArray();
		JSONObject param = new JSONObject();
		
		try {
			
			primeObj.put("merchant_recognized", primeSwitch.getTag().toString());
			secondObj.put("card_in_possession", secondSwitch.getTag().toString());
			array.put(primeObj);
			array.put(secondObj);
			param.put("comment", comment);
			param.put("reason_details", array);
			
		} catch (JSONException e) {
			Log.e(LOG, "Unable to contruct request body");
		}
		
		PostRequest post = new PostRequest(new OnComplete() {
			@Override
			public void onComplete(Boolean result) {
				dismissLoading();
				if(result){
					showConfimationPopup();
				}
				else showToastMessage(R.string.error_request, 10);
			}
		});
		if(param!=null){
			post.execute(chargeback.getLinksbyKey("self"),param.toString());
		}
		
	}

	/**
	 * send POST Request to lock/unlock card
	 * @param image
	 */
	protected void postLockRequest(final ImageView image) {
		final TextView lockMessage = (TextView) this.findViewById(R.id.chargeback_lock_message);
		showLoading();		
		PostRequest post = new PostRequest(new OnComplete() {
			@Override
			public void onComplete(Boolean result) {
				dismissLoading();
				if(result){
					chargeback.toggleStatus();
					
					ImageView img = image;
					TextView msg = lockMessage;
					if(chargeback.getBlockStatus()){
						img.setImageResource(R.drawable.ic_chargeback_lock);
						msg.setText(R.string.chargeback_card_blocked);
					}
					else{
						img.setImageResource(R.drawable.ic_chargeback_unlock);
						msg.setText(R.string.chargeback_card_unblocked);
					}
				}
				else showToastMessage(R.string.error_request, 10);
			}
		});
		if(!chargeback.getBlockStatus()){
			post.execute(chargeback.getLinksbyKey("block_card"), new JSONObject().toString());
		}
		else{
			post.execute(chargeback.getLinksbyKey("unblock_card"), new JSONObject().toString());
		}
		
	}

	protected void showConfimationPopup() {
		
		LayoutInflater l = getLayoutInflater();
		final View confirmView = l.inflate(R.layout.chargeback_confirmation, null);
        TextView title = (TextView)confirmView.findViewById(R.id.chargeback_dialogue_title);
        TextView message = (TextView)confirmView.findViewById(R.id.chargeback_dialogue_message);
        TextView close = (TextView)confirmView.findViewById(R.id.chargeback_dialogue_close);
        title.setText(R.string.chargeback_confirm_title);
        message.setText(R.string.chargeback_confirm_message);
        close.setText(R.string.chargeback_confirm_close);
        final PopupWindow pop = new PopupWindow(confirmView,LayoutParams.WRAP_CONTENT,  
                LayoutParams.WRAP_CONTENT);
        
        close.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				setForegroundAlpha(0);
				pop.dismiss();
				finish();
			}
		});
        setForegroundAlpha(200);
        /*Displaying the popup window*/
        pop.showAtLocation(confirmView, Gravity.CENTER, 10, 10);
	}


	/** Foreground  transparency
	 * @param alpha
	 */
	protected void setForegroundAlpha(int alpha) {
		
		FrameLayout frame = (FrameLayout) findViewById( R.id.chargeback_frame);
		frame.getForeground().setAlpha(alpha);
	}
	
	protected void showLoading(){
		View loader = getLayoutInflater().inflate(R.layout.action_processing, null);
		if(popupLoader==null){
			popupLoader = new PopupWindow(loader,LayoutParams.WRAP_CONTENT,  
	                LayoutParams.WRAP_CONTENT);
			
		}
        if(!popupLoader.isShowing()){
			popupLoader = new PopupWindow(loader,LayoutParams.WRAP_CONTENT,  
	                LayoutParams.WRAP_CONTENT);
			setForegroundAlpha(100);
	        /*Displaying the Loader*/
	        popupLoader.showAtLocation(loader, Gravity.CENTER, 10, 10);
		}
    }
	protected void dismissLoading(){
		if(popupLoader != null && popupLoader.isShowing()){
			setForegroundAlpha(0);
	        /*Dismiss the Loader*/
	        popupLoader.dismiss();
		}
	}
	
	protected void showToastMessage(int message, int duration){
		Toast toast = Toast.makeText(getApplicationContext(), message, duration);
		toast.show();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.chargeback, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
}
